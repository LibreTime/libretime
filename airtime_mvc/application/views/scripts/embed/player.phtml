<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <link rel="stylesheet" href="<?php echo $this->css?>" type="text/css">
    <link href='https://fonts.googleapis.com/css?family=Roboto:400,100,300,700' rel='stylesheet' type='text/css'>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.1/howler.js"></script>
    <!-- <script src="/js/libs/howler.js"></script> -->
    <script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>
    <!-- <script src="/js/libs/handlebars.min-v4.7.6.js"></script> -->
</head>

<body>
    <div id="embedPlayerBody">
        <!-- Inserted template goes here via. Handlebars.js -->
        <script id="nowPlayingTemp" type="text/x-handlebars-template">
            <div id="player" <?php if ($this->player_style == "basic") echo "style='display:block;'"; else echo "style='display:none'"; ?>>
                <div class="airtime_player">

                    <div class="airtime_header">
                        <p class="station_name"><?php echo _("Now Playing") ?></p>
                    </div>

                    <div class="airtime_box">
                        <div class="airtime_button">
                            <span id="play_button" class="play_button" onclick="doPlay()"></span>
                            <span id="stop_button" class="stop_button hide_button" onclick="doStop()"></span>
                        </div>
                        <p class="now_playing">
                            <b>{{song}}</b>
                            <span>{{artist}}</span>
                        </p>
                    </div>

                    <div style="clear:both"></div>

                    <div class="airtime_schedule">
                        <p class="airtime_next"><?php echo _("Next") ?></p>
                        <ul class="schedule_list">
                            <li>{{next}}</li>
                        </ul>
                    </div>
                    <a class="airtime_pro" target="_blank" href="<?php echo PRODUCT_SITE_URL; ?>"><?php printf(_('Powered by %s'), PRODUCT_NAME); ?></a>
                </div>
            </div>

            <div id="premium_player" <?php if ($this->player_style == "premium") echo "style='display:block;'"; else echo "style='display:none'"; ?>>
                <div class="bottom_bar">
                    <div id="premiumPlayBtn" class="play cont_btn" onclick="premiumBtn()"></div>

                    <div class="on_air">
                        <p class="now_playing">
                            <b>{{song}}</b>
                            <span>{{artist}}</span>
                        </p>
                    </div>
                    <div class='flex_spacer' data-tab='tab-1'></div>
                    <div class='schedule_btn button current' data-tab='tab-1'></div>
                    <div class='about_us_btn button' data-tab='tab-2'></div>
                </div>
            </div>
        </script>
    </div>

    <script type="text/javascript">
        let mobileStreams, desktopStreams;
        let streamURLs = []; // Needs to be array
        if ("<?php echo $this->playerMode ?>" == "auto") {
            mobileStreams = <?php echo $this->availableMobileStreams?>; // {"url":"http:\/\/192.168.64.53:8000\/airtime_128","codec":"mp3","bitrate":128,"mobile":"0"}, {etc}
            desktopStreams = <?php echo $this->availableDesktopStreams?>;
            if (screen.width <= 760) {
                streamURLs.push(mobileStreams[0].url);
            } else { // not a mobile device
                streamURLs.push(desktopStreams[0].url);
            }
        } else { // not set to "auto"
            streamURLs.push(<?php echo $this->streamURL ?>);
        }

        // Init Howler.js player
        var embedPlayer = new Howl({
            src: streamURLs,
            format: ['ogg', 'mp3', 'opus', 'aac'],
            volume: 0.5,
            html5: true,
            onload: function(){
                console.log('Stream loaded successfully!');
            }
        });

        // Functions for buttons
        function doPlay(){
            console.log('play');
            embedPlayer.play();
            document.getElementById("play_button").classList.toggle("hide_button");
            document.getElementById("stop_button").classList.toggle("hide_button");
        };

        function doStop(){
            console.log('stop');
            embedPlayer.stop();
            document.getElementById("play_button").classList.toggle("hide_button");
            document.getElementById("stop_button").classList.toggle("hide_button");
        };

        function premiumBtn(){
            let btnStatus = document.querySelector('.cont_btn');
            if (btnStatus.classList.contains('play')) {
                console.log('play');
                embedPlayer.play();
            } else {
                console.log('stop');
                embedPlayer.stop();
            }
            document.getElementById("premiumPlayBtn").classList.toggle("play");
            document.getElementById("premiumPlayBtn").classList.toggle("pause");   
        }

        let recheckTimer, currentSong, currentArtist, nextProg, currentEndTime, nowPlayingData;
        const embedPlayerBody = document.querySelector('#embedPlayerBody');
        // Get Now Playing metadata
        async function getMetadata(){
            let metaURL = "<?php echo $this->metadata_api_url?>";
            const metaResponse = await fetch(metaURL);
            const metaData = await metaResponse.json();

            if (!metaResponse.ok) {
                const error = (metaData && metaData.message) || metaResponse.statusText;
                console.log('The API request failed: ', error);
                // "Off Air" metadata is passed through if the API call fails
                nowPlayingData = {
                    song: "<?php echo _('Off Air');?>",
                    artist: "<?php echo _('Error');?>",
                    next: "<?php echo _('Error with API request');?>"
                };
            } else {
                // If nothing is scheduled
                if (metaData.current === null) {
                    currentSong = "<?php echo _('Off Air');?>";
                    currentArtist = "<?php echo _('Offline');?>";
                    // How long browser waits to try getting metadata again w/o user refresh
                    recheckTimer = 20000; // 20 sec
                } else {
                    currentSong = metaData.current.metadata.track_title;
                    currentArtist = metaData.current.metadata.artist_name;
                    // How long browser waits to try getting metadata again w/o user refresh
                    currentEndTime = new Date(metaData.current.ends);
                    if (currentEndTime == "Invalid Date" || isNaN(currentEndTime)) {
                        // If the conversion didn't work (since the String is not in ISO format)
                        // then change it to be ISO-compliant. This is somewhat hacky and may break
                        // if the date string format in live-info changes!
                        currentEndTime = new Date((metaData.current.ends).replace(" ", "T"));
                    }
                    // What time is it now?
                    var currentClock = new Date();
                    //convert current_time to UTC to match the timezone of time_to_next_track_starts
                    currentClock = new Date(currentClock.getTime() + currentClock.getTimezoneOffset() * 60 * 1000);
                    recheckTimer = currentEndTime - currentClock;
                }
                // Not concerned about metadata repeat fetching in regards to next program
                nextProg = (metaData.next === null) ? "<?php echo _('Nothing scheduled');?>" : metaData.next.name;

                // Create object with now playing data
                nowPlayingData = {
                    song: currentSong,
                    artist: currentArtist,
                    next: nextProg
                };
                console.log(nowPlayingData);
            }

            // Templating with Handlebars.js
            const hbNowPlaying = document.querySelector('#nowPlayingTemp').innerHTML;
            var hbTemplate = Handlebars.compile(hbNowPlaying); // 2nd iter compiling fails [WIP]
            var compiledHTML = hbTemplate(nowPlayingData);
            embedPlayerBody.innerHTML = compiledHTML;

            // Doomsday scenerio for metadata checking: clocks out of sync
            if (isNaN(recheckTimer) || recheckTimer < 0) recheckTimer = 0;

            // Add 3 seconds to the timeout so Libretime has time to update the metadata before we fetch it
            metadataTimer = setTimeout(getMetadata, recheckTimer+3000);
        };
        getMetadata();
    </script>
</body>
</html>
